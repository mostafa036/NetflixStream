// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetflixStream.Persistence.Data.Contexts;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NetflixStream.Persistence.Data.Migrations.NetflixStreamMigrations
{
    [DbContext(typeof(NetflixStreamDbContext))]
    [Migration("20241103225932_updateMovieStore")]
    partial class updateMovieStore
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CountryMovies", b =>
                {
                    b.Property<int>("CountriesID")
                        .HasColumnType("integer");

                    b.Property<int>("MoviesID")
                        .HasColumnType("integer");

                    b.HasKey("CountriesID", "MoviesID");

                    b.HasIndex("MoviesID");

                    b.ToTable("CountryMovies");
                });

            modelBuilder.Entity("CountrySeries", b =>
                {
                    b.Property<int>("CountriesID")
                        .HasColumnType("integer");

                    b.Property<int>("SeriesID")
                        .HasColumnType("integer");

                    b.HasKey("CountriesID", "SeriesID");

                    b.HasIndex("SeriesID");

                    b.ToTable("CountrySeries");
                });

            modelBuilder.Entity("DirectorMovies", b =>
                {
                    b.Property<int>("DirectorsID")
                        .HasColumnType("integer");

                    b.Property<int>("MoviesID")
                        .HasColumnType("integer");

                    b.HasKey("DirectorsID", "MoviesID");

                    b.HasIndex("MoviesID");

                    b.ToTable("DirectorMovies");
                });

            modelBuilder.Entity("DirectorSeries", b =>
                {
                    b.Property<int>("DirectorsID")
                        .HasColumnType("integer");

                    b.Property<int>("SeriesID")
                        .HasColumnType("integer");

                    b.HasKey("DirectorsID", "SeriesID");

                    b.HasIndex("SeriesID");

                    b.ToTable("DirectorSeries");
                });

            modelBuilder.Entity("GenreMovies", b =>
                {
                    b.Property<int>("GenresID")
                        .HasColumnType("integer");

                    b.Property<int>("MoviesID")
                        .HasColumnType("integer");

                    b.HasKey("GenresID", "MoviesID");

                    b.HasIndex("MoviesID");

                    b.ToTable("GenreMovies");
                });

            modelBuilder.Entity("GenreSeries", b =>
                {
                    b.Property<int>("GenresID")
                        .HasColumnType("integer");

                    b.Property<int>("SeriesID")
                        .HasColumnType("integer");

                    b.HasKey("GenresID", "SeriesID");

                    b.HasIndex("SeriesID");

                    b.ToTable("GenreSeries");
                });

            modelBuilder.Entity("LanguageMovies", b =>
                {
                    b.Property<int>("MoviesID")
                        .HasColumnType("integer");

                    b.Property<int>("languagesID")
                        .HasColumnType("integer");

                    b.HasKey("MoviesID", "languagesID");

                    b.HasIndex("languagesID");

                    b.ToTable("LanguageMovies");
                });

            modelBuilder.Entity("LanguageSeries", b =>
                {
                    b.Property<int>("SeriesID")
                        .HasColumnType("integer");

                    b.Property<int>("languagesID")
                        .HasColumnType("integer");

                    b.HasKey("SeriesID", "languagesID");

                    b.HasIndex("languagesID");

                    b.ToTable("LanguageSeries");
                });

            modelBuilder.Entity("MoviesProducer", b =>
                {
                    b.Property<int>("MoviesID")
                        .HasColumnType("integer");

                    b.Property<int>("ProducersID")
                        .HasColumnType("integer");

                    b.HasKey("MoviesID", "ProducersID");

                    b.HasIndex("ProducersID");

                    b.ToTable("MoviesProducer");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.Actor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<int>("DateOfBirth")
                        .HasColumnType("integer");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<char>("Gender")
                        .HasColumnType("character(1)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("ID");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.Country", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.Director", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("ID");

                    b.ToTable("Directors");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.Download", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("DownloadDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("MovieId")
                        .HasColumnType("integer");

                    b.Property<string>("NikeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("SeriesId")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("MovieId");

                    b.HasIndex("SeriesId");

                    b.ToTable("Downloads");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.EpisodStore", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("EpisodeId")
                        .HasColumnType("integer");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TrailerPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("EpisodeId")
                        .IsUnique();

                    b.ToTable("EpisodStores");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.Episode", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<DateOnly>("AirDate")
                        .HasColumnType("date");

                    b.Property<int>("CommentCount")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("EpisodeNumber")
                        .HasColumnType("integer");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("SeasonNumber")
                        .HasColumnType("integer");

                    b.Property<int>("SeriesId")
                        .HasColumnType("integer");

                    b.Property<int>("WatchCount")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("SeriesId");

                    b.ToTable("Episodes");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.EpisodeComments", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("EpisodeID")
                        .HasColumnType("integer");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("ID");

                    b.ToTable("EpisodeComments");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.EpisodePhoto", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("EpisodeId")
                        .HasColumnType("integer");

                    b.Property<string>("PosterPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("EpisodeId");

                    b.ToTable("EpisodePhotos");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.EpisodeWatchingHistory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("EndWatching")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("EpisodeID")
                        .HasColumnType("integer");

                    b.Property<TimeSpan?>("LastWatchedPosition")
                        .HasColumnType("interval");

                    b.Property<int>("SeriesID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartWatching")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("WatchCount")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("EpisodeID");

                    b.HasIndex("SeriesID");

                    b.ToTable("EpisodeWatchingHistories");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.Genre", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("ID");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.Language", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("ID");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.MovieActor", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("integer");

                    b.Property<int>("ActorId")
                        .HasColumnType("integer");

                    b.Property<string>("CharacterName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("MovieId", "ActorId");

                    b.HasIndex("ActorId");

                    b.ToTable("MovieActors");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.MovieComments", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MovieID")
                        .HasColumnType("integer");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("MovieID");

                    b.ToTable("MovieComments");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.MoviePhoto", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("MovieId")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("MovieId");

                    b.ToTable("MoviePhotos");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.MovieReviews", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("MovieID")
                        .HasColumnType("integer");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("ID");

                    b.HasIndex("MovieID");

                    b.ToTable("MovieReviews");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.MovieStore", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("FilePath")
                        .HasColumnType("text");

                    b.Property<int>("MoviesId")
                        .HasColumnType("integer");

                    b.Property<string>("TrailerPath")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("MoviesId")
                        .IsUnique();

                    b.ToTable("MovieStores");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.MovieWatchingHistory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("EndWatching")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeSpan?>("LastWatchedPosition")
                        .HasColumnType("interval");

                    b.Property<int>("MovieID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartWatching")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("WatchCount")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("MovieID");

                    b.ToTable("MovieWatchingHistories");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.Movies", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("AgeRating")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("CommentCount")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<decimal>("IMDbRating")
                        .HasColumnType("decimal(3,1)");

                    b.Property<string>("PosterName")
                        .HasColumnType("text");

                    b.Property<string>("PosterPath")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("ReleaseDate")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("WatchCount")
                        .HasColumnType("integer");

                    b.Property<string>("Writer")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("ID");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.Producer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("ID");

                    b.ToTable("Producers");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.Series", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("AgeRating")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Episodes")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("FirstAired")
                        .HasColumnType("date");

                    b.Property<decimal>("IMDbRating")
                        .HasColumnType("numeric");

                    b.Property<DateOnly>("LastAired")
                        .HasColumnType("date");

                    b.Property<int>("Seasons")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("WatchCount")
                        .HasColumnType("integer");

                    b.Property<string>("Writer")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("ID");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.SeriesActor", b =>
                {
                    b.Property<int>("SeriesId")
                        .HasColumnType("integer");

                    b.Property<int>("ActorId")
                        .HasColumnType("integer");

                    b.Property<string>("CharacterName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("SeriesId", "ActorId");

                    b.HasIndex("ActorId");

                    b.ToTable("SeriesActors");
                });

            modelBuilder.Entity("ProducerSeries", b =>
                {
                    b.Property<int>("ProducersID")
                        .HasColumnType("integer");

                    b.Property<int>("SeriesID")
                        .HasColumnType("integer");

                    b.HasKey("ProducersID", "SeriesID");

                    b.HasIndex("SeriesID");

                    b.ToTable("ProducerSeries");
                });

            modelBuilder.Entity("CountryMovies", b =>
                {
                    b.HasOne("NetflixStream.Domain.Entities.Country", null)
                        .WithMany()
                        .HasForeignKey("CountriesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetflixStream.Domain.Entities.Movies", null)
                        .WithMany()
                        .HasForeignKey("MoviesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CountrySeries", b =>
                {
                    b.HasOne("NetflixStream.Domain.Entities.Country", null)
                        .WithMany()
                        .HasForeignKey("CountriesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetflixStream.Domain.Entities.Series", null)
                        .WithMany()
                        .HasForeignKey("SeriesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DirectorMovies", b =>
                {
                    b.HasOne("NetflixStream.Domain.Entities.Director", null)
                        .WithMany()
                        .HasForeignKey("DirectorsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetflixStream.Domain.Entities.Movies", null)
                        .WithMany()
                        .HasForeignKey("MoviesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DirectorSeries", b =>
                {
                    b.HasOne("NetflixStream.Domain.Entities.Director", null)
                        .WithMany()
                        .HasForeignKey("DirectorsID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetflixStream.Domain.Entities.Series", null)
                        .WithMany()
                        .HasForeignKey("SeriesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenreMovies", b =>
                {
                    b.HasOne("NetflixStream.Domain.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetflixStream.Domain.Entities.Movies", null)
                        .WithMany()
                        .HasForeignKey("MoviesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GenreSeries", b =>
                {
                    b.HasOne("NetflixStream.Domain.Entities.Genre", null)
                        .WithMany()
                        .HasForeignKey("GenresID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetflixStream.Domain.Entities.Series", null)
                        .WithMany()
                        .HasForeignKey("SeriesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LanguageMovies", b =>
                {
                    b.HasOne("NetflixStream.Domain.Entities.Movies", null)
                        .WithMany()
                        .HasForeignKey("MoviesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetflixStream.Domain.Entities.Language", null)
                        .WithMany()
                        .HasForeignKey("languagesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LanguageSeries", b =>
                {
                    b.HasOne("NetflixStream.Domain.Entities.Series", null)
                        .WithMany()
                        .HasForeignKey("SeriesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetflixStream.Domain.Entities.Language", null)
                        .WithMany()
                        .HasForeignKey("languagesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MoviesProducer", b =>
                {
                    b.HasOne("NetflixStream.Domain.Entities.Movies", null)
                        .WithMany()
                        .HasForeignKey("MoviesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetflixStream.Domain.Entities.Producer", null)
                        .WithMany()
                        .HasForeignKey("ProducersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.Download", b =>
                {
                    b.HasOne("NetflixStream.Domain.Entities.Movies", "Movie")
                        .WithMany("Download")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NetflixStream.Domain.Entities.Series", "Series")
                        .WithMany("Downloads")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Movie");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.EpisodStore", b =>
                {
                    b.HasOne("NetflixStream.Domain.Entities.Episode", "Episode")
                        .WithOne("EpisodStore")
                        .HasForeignKey("NetflixStream.Domain.Entities.EpisodStore", "EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Episode");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.Episode", b =>
                {
                    b.HasOne("NetflixStream.Domain.Entities.Series", "Series")
                        .WithMany("EpisodesList")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Series");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.EpisodeComments", b =>
                {
                    b.HasOne("NetflixStream.Domain.Entities.Episode", "Episode")
                        .WithMany("EpisodeComments")
                        .HasForeignKey("ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Episode");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.EpisodePhoto", b =>
                {
                    b.HasOne("NetflixStream.Domain.Entities.Episode", "Episode")
                        .WithMany("EpisodePhoto")
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Episode");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.EpisodeWatchingHistory", b =>
                {
                    b.HasOne("NetflixStream.Domain.Entities.Episode", "Episode")
                        .WithMany("EpisodeWatchingHistories")
                        .HasForeignKey("EpisodeID");

                    b.HasOne("NetflixStream.Domain.Entities.Series", "Series")
                        .WithMany()
                        .HasForeignKey("SeriesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Episode");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.MovieActor", b =>
                {
                    b.HasOne("NetflixStream.Domain.Entities.Actor", "Actor")
                        .WithMany("MovieActors")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetflixStream.Domain.Entities.Movies", "Movie")
                        .WithMany("MovieActors")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.MovieComments", b =>
                {
                    b.HasOne("NetflixStream.Domain.Entities.Movies", "Movie")
                        .WithMany("MovieComments")
                        .HasForeignKey("MovieID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.MoviePhoto", b =>
                {
                    b.HasOne("NetflixStream.Domain.Entities.Movies", "Movie")
                        .WithMany("moviePhotos")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.MovieReviews", b =>
                {
                    b.HasOne("NetflixStream.Domain.Entities.Movies", "Movie")
                        .WithMany("MovieReviews")
                        .HasForeignKey("MovieID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.MovieStore", b =>
                {
                    b.HasOne("NetflixStream.Domain.Entities.Movies", "Movies")
                        .WithOne("MovieStore")
                        .HasForeignKey("NetflixStream.Domain.Entities.MovieStore", "MoviesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Movies");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.MovieWatchingHistory", b =>
                {
                    b.HasOne("NetflixStream.Domain.Entities.Movies", "Movie")
                        .WithMany("MovieWatchingHistories")
                        .HasForeignKey("MovieID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.SeriesActor", b =>
                {
                    b.HasOne("NetflixStream.Domain.Entities.Actor", "Actor")
                        .WithMany("SeriesActors")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetflixStream.Domain.Entities.Series", "Series")
                        .WithMany("SeriesActors")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("ProducerSeries", b =>
                {
                    b.HasOne("NetflixStream.Domain.Entities.Producer", null)
                        .WithMany()
                        .HasForeignKey("ProducersID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetflixStream.Domain.Entities.Series", null)
                        .WithMany()
                        .HasForeignKey("SeriesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.Actor", b =>
                {
                    b.Navigation("MovieActors");

                    b.Navigation("SeriesActors");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.Episode", b =>
                {
                    b.Navigation("EpisodStore")
                        .IsRequired();

                    b.Navigation("EpisodeComments");

                    b.Navigation("EpisodePhoto");

                    b.Navigation("EpisodeWatchingHistories");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.Movies", b =>
                {
                    b.Navigation("Download");

                    b.Navigation("MovieActors");

                    b.Navigation("MovieComments");

                    b.Navigation("MovieReviews");

                    b.Navigation("MovieStore")
                        .IsRequired();

                    b.Navigation("MovieWatchingHistories");

                    b.Navigation("moviePhotos");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.Series", b =>
                {
                    b.Navigation("Downloads");

                    b.Navigation("EpisodesList");

                    b.Navigation("SeriesActors");
                });
#pragma warning restore 612, 618
        }
    }
}
