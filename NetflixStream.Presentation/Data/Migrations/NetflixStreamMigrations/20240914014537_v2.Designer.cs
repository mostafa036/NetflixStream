// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetflixStream.Persistence.Data.Contexts;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NetflixStream.Persistence.Data.Migrations.NetflixStreamMigrations
{
    [DbContext(typeof(NetflixStreamDbContext))]
    [Migration("20240914014537_v2")]
    partial class v2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NetflixStream.Domain.Entities.Actor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<int>("DateOfBirth")
                        .HasColumnType("integer");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<char>("Gender")
                        .HasColumnType("character(1)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("ID");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.Country", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.Director", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("ID");

                    b.ToTable("Directors");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.EpisodStore", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("EpisodeId")
                        .HasColumnType("integer");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TrailerPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("EpisodeId")
                        .IsUnique();

                    b.ToTable("EpisodStores");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.Episode", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<DateOnly>("AirDate")
                        .HasColumnType("date");

                    b.Property<int>("CommentCount")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("EpisodeNumber")
                        .HasColumnType("integer");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("SeasonNumber")
                        .HasColumnType("integer");

                    b.Property<int>("SeriesId")
                        .HasColumnType("integer");

                    b.Property<int>("WatchCount")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("SeriesId");

                    b.ToTable("Episodes");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.EpisodeComments", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("EpisodeID")
                        .HasColumnType("integer");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("ID");

                    b.ToTable("EpisodeComments");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.EpisodePhoto", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("EpisodeId")
                        .HasColumnType("integer");

                    b.Property<string>("PosterPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("EpisodeId");

                    b.ToTable("EpisodePhotos");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.EpisodeWatchingHistory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("EndWatching")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("EpisodeID")
                        .HasColumnType("integer");

                    b.Property<TimeSpan?>("LastWatchedPosition")
                        .HasColumnType("interval");

                    b.Property<int>("SeriesID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartWatching")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("WatchCount")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("EpisodeID");

                    b.HasIndex("SeriesID");

                    b.ToTable("EpisodeWatchingHistories");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.Genre", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("ID");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.Language", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("ID");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.MovieActor", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("integer");

                    b.Property<int>("ActorId")
                        .HasColumnType("integer");

                    b.Property<string>("CharacterName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("MovieId", "ActorId");

                    b.HasIndex("ActorId");

                    b.ToTable("MovieActors");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.MovieComments", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MovieID")
                        .HasColumnType("integer");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("MovieID");

                    b.ToTable("MovieComments");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.MovieDirectors", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("integer");

                    b.Property<int>("DirectorId")
                        .HasColumnType("integer");

                    b.HasKey("MovieId", "DirectorId");

                    b.HasIndex("DirectorId");

                    b.ToTable("MovieDirectors");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.MoviePhoto", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("MovieId")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("MovieId");

                    b.ToTable("MoviePhotos");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.MovieReviews", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("MovieID")
                        .HasColumnType("integer");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("ID");

                    b.HasIndex("MovieID");

                    b.ToTable("MovieReviews");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.MovieStore", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MoviesId")
                        .HasColumnType("integer");

                    b.Property<string>("TrailerPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("MoviesId")
                        .IsUnique();

                    b.ToTable("MovieStores");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.MovieWatchingHistory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("EndWatching")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeSpan?>("LastWatchedPosition")
                        .HasColumnType("interval");

                    b.Property<int>("MovieID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartWatching")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("WatchCount")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("MovieID");

                    b.ToTable("MovieWatchingHistories");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.Movies", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("AgeRating")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("CommentCount")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<decimal>("IMDbRating")
                        .HasColumnType("decimal(3,1)");

                    b.Property<string>("PosterPath")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("ReleaseDate")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("WatchCount")
                        .HasColumnType("integer");

                    b.Property<string>("Writer")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("ID");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.MoviesCountry", b =>
                {
                    b.Property<int>("CountryID")
                        .HasColumnType("integer");

                    b.Property<int>("MoviesID")
                        .HasColumnType("integer");

                    b.HasKey("CountryID", "MoviesID");

                    b.HasIndex("MoviesID");

                    b.ToTable("MoviesCountries");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.MoviesGenres", b =>
                {
                    b.Property<int>("GenresID")
                        .HasColumnType("integer");

                    b.Property<int>("MoviesID")
                        .HasColumnType("integer");

                    b.HasKey("GenresID", "MoviesID");

                    b.HasIndex("MoviesID");

                    b.ToTable("MoviesGenres");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.MoviesLanguages", b =>
                {
                    b.Property<int>("MoviesID")
                        .HasColumnType("integer");

                    b.Property<int>("LanguageID")
                        .HasColumnType("integer");

                    b.HasKey("MoviesID", "LanguageID");

                    b.HasIndex("LanguageID");

                    b.ToTable("MoviesLanguages");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.MoviesProducers", b =>
                {
                    b.Property<int>("ProducerID")
                        .HasColumnType("integer");

                    b.Property<int>("MoviesID")
                        .HasColumnType("integer");

                    b.HasKey("ProducerID", "MoviesID");

                    b.HasIndex("MoviesID");

                    b.ToTable("MoviesProducers");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.Producer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("ID");

                    b.ToTable("Producers");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.Series", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("AgeRating")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Episodes")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("FirstAired")
                        .HasColumnType("date");

                    b.Property<decimal>("IMDbRating")
                        .HasColumnType("numeric");

                    b.Property<DateOnly>("LastAired")
                        .HasColumnType("date");

                    b.Property<int>("Seasons")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("WatchCount")
                        .HasColumnType("integer");

                    b.Property<string>("Writer")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("ID");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.SeriesActor", b =>
                {
                    b.Property<int>("SeriesId")
                        .HasColumnType("integer");

                    b.Property<int>("ActorId")
                        .HasColumnType("integer");

                    b.Property<string>("CharacterName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("SeriesId", "ActorId");

                    b.HasIndex("ActorId");

                    b.ToTable("SeriesActors");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.SeriesCountry", b =>
                {
                    b.Property<int>("SeriesID")
                        .HasColumnType("integer");

                    b.Property<int>("CountryID")
                        .HasColumnType("integer");

                    b.HasKey("SeriesID", "CountryID");

                    b.HasIndex("CountryID");

                    b.ToTable("SeriesCountries");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.SeriesDirectors", b =>
                {
                    b.Property<int>("SeriesID")
                        .HasColumnType("integer");

                    b.Property<int>("DirectorID")
                        .HasColumnType("integer");

                    b.HasKey("SeriesID", "DirectorID");

                    b.HasIndex("DirectorID");

                    b.ToTable("SeriesDirectors");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.SeriesGenres", b =>
                {
                    b.Property<int>("GenresID")
                        .HasColumnType("integer");

                    b.Property<int>("SeriesID")
                        .HasColumnType("integer");

                    b.HasKey("GenresID", "SeriesID");

                    b.HasIndex("SeriesID");

                    b.ToTable("SeriesGenres");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.SeriesLanguages", b =>
                {
                    b.Property<int>("languageID")
                        .HasColumnType("integer");

                    b.Property<int>("SeriesID")
                        .HasColumnType("integer");

                    b.HasKey("languageID", "SeriesID");

                    b.HasIndex("SeriesID");

                    b.ToTable("SeriesLanguages");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.SeriesProducers", b =>
                {
                    b.Property<int>("ProducerID")
                        .HasColumnType("integer");

                    b.Property<int>("SeriesID")
                        .HasColumnType("integer");

                    b.HasKey("ProducerID", "SeriesID");

                    b.HasIndex("SeriesID");

                    b.ToTable("SeriesProducers");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.EpisodStore", b =>
                {
                    b.HasOne("NetflixStream.Domain.Entities.Episode", "Episode")
                        .WithOne("EpisodStore")
                        .HasForeignKey("NetflixStream.Domain.Entities.EpisodStore", "EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Episode");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.Episode", b =>
                {
                    b.HasOne("NetflixStream.Domain.Entities.Series", "Series")
                        .WithMany("EpisodesList")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Series");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.EpisodeComments", b =>
                {
                    b.HasOne("NetflixStream.Domain.Entities.Episode", "Episode")
                        .WithMany("EpisodeComments")
                        .HasForeignKey("ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Episode");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.EpisodePhoto", b =>
                {
                    b.HasOne("NetflixStream.Domain.Entities.Episode", "Episode")
                        .WithMany("EpisodePhoto")
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Episode");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.EpisodeWatchingHistory", b =>
                {
                    b.HasOne("NetflixStream.Domain.Entities.Episode", "Episode")
                        .WithMany("EpisodeWatchingHistories")
                        .HasForeignKey("EpisodeID");

                    b.HasOne("NetflixStream.Domain.Entities.Series", "Series")
                        .WithMany()
                        .HasForeignKey("SeriesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Episode");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.MovieActor", b =>
                {
                    b.HasOne("NetflixStream.Domain.Entities.Actor", "Actor")
                        .WithMany("MovieActors")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetflixStream.Domain.Entities.Movies", "Movie")
                        .WithMany("MovieActors")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.MovieComments", b =>
                {
                    b.HasOne("NetflixStream.Domain.Entities.Movies", "Movie")
                        .WithMany("MovieComments")
                        .HasForeignKey("MovieID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.MovieDirectors", b =>
                {
                    b.HasOne("NetflixStream.Domain.Entities.Director", "Director")
                        .WithMany("MovieDirectors")
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetflixStream.Domain.Entities.Movies", "Movie")
                        .WithMany("MovieDirectors")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Director");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.MoviePhoto", b =>
                {
                    b.HasOne("NetflixStream.Domain.Entities.Movies", "Movie")
                        .WithMany("moviePhotos")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.MovieReviews", b =>
                {
                    b.HasOne("NetflixStream.Domain.Entities.Movies", "Movie")
                        .WithMany("MovieReviews")
                        .HasForeignKey("MovieID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.MovieStore", b =>
                {
                    b.HasOne("NetflixStream.Domain.Entities.Movies", "Movies")
                        .WithOne("MovieStore")
                        .HasForeignKey("NetflixStream.Domain.Entities.MovieStore", "MoviesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Movies");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.MovieWatchingHistory", b =>
                {
                    b.HasOne("NetflixStream.Domain.Entities.Movies", "Movie")
                        .WithMany("MovieWatchingHistories")
                        .HasForeignKey("MovieID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.MoviesCountry", b =>
                {
                    b.HasOne("NetflixStream.Domain.Entities.Country", "Country")
                        .WithMany("MoviesCountries")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetflixStream.Domain.Entities.Movies", "Movies")
                        .WithMany("MoviesCountry")
                        .HasForeignKey("MoviesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Movies");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.MoviesGenres", b =>
                {
                    b.HasOne("NetflixStream.Domain.Entities.Genre", "Genre")
                        .WithMany("MoviesGenres")
                        .HasForeignKey("GenresID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetflixStream.Domain.Entities.Movies", "Movies")
                        .WithMany("MoviesGenres")
                        .HasForeignKey("MoviesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Movies");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.MoviesLanguages", b =>
                {
                    b.HasOne("NetflixStream.Domain.Entities.Language", "Language")
                        .WithMany("MoviesLanguages")
                        .HasForeignKey("LanguageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetflixStream.Domain.Entities.Movies", "Movies")
                        .WithMany("MoviesLanguages")
                        .HasForeignKey("MoviesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Movies");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.MoviesProducers", b =>
                {
                    b.HasOne("NetflixStream.Domain.Entities.Movies", "Movies")
                        .WithMany("MoviesProducers")
                        .HasForeignKey("MoviesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetflixStream.Domain.Entities.Producer", "Producer")
                        .WithMany("MoviesProducers")
                        .HasForeignKey("ProducerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movies");

                    b.Navigation("Producer");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.SeriesActor", b =>
                {
                    b.HasOne("NetflixStream.Domain.Entities.Actor", "Actor")
                        .WithMany("SeriesActors")
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetflixStream.Domain.Entities.Series", "Series")
                        .WithMany("SeriesActors")
                        .HasForeignKey("SeriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.SeriesCountry", b =>
                {
                    b.HasOne("NetflixStream.Domain.Entities.Country", "Country")
                        .WithMany("SeriesCountries")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetflixStream.Domain.Entities.Series", "Series")
                        .WithMany("SeriesCountry")
                        .HasForeignKey("SeriesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.SeriesDirectors", b =>
                {
                    b.HasOne("NetflixStream.Domain.Entities.Director", "Director")
                        .WithMany("SeriesDirectors")
                        .HasForeignKey("DirectorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetflixStream.Domain.Entities.Series", "Series")
                        .WithMany("SeriesDirectors")
                        .HasForeignKey("SeriesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Director");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.SeriesGenres", b =>
                {
                    b.HasOne("NetflixStream.Domain.Entities.Genre", "Genre")
                        .WithMany("SeriesGenres")
                        .HasForeignKey("GenresID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetflixStream.Domain.Entities.Series", "Series")
                        .WithMany("SeriesGenres")
                        .HasForeignKey("SeriesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.SeriesLanguages", b =>
                {
                    b.HasOne("NetflixStream.Domain.Entities.Series", "Series")
                        .WithMany("SeriesLanguages")
                        .HasForeignKey("SeriesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetflixStream.Domain.Entities.Language", "language")
                        .WithMany("SeriesLanguages")
                        .HasForeignKey("languageID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Series");

                    b.Navigation("language");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.SeriesProducers", b =>
                {
                    b.HasOne("NetflixStream.Domain.Entities.Producer", "Producer")
                        .WithMany("SeriesProducers")
                        .HasForeignKey("ProducerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetflixStream.Domain.Entities.Series", "Series")
                        .WithMany("SeriesProducers")
                        .HasForeignKey("SeriesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producer");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.Actor", b =>
                {
                    b.Navigation("MovieActors");

                    b.Navigation("SeriesActors");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.Country", b =>
                {
                    b.Navigation("MoviesCountries");

                    b.Navigation("SeriesCountries");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.Director", b =>
                {
                    b.Navigation("MovieDirectors");

                    b.Navigation("SeriesDirectors");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.Episode", b =>
                {
                    b.Navigation("EpisodStore")
                        .IsRequired();

                    b.Navigation("EpisodeComments");

                    b.Navigation("EpisodePhoto");

                    b.Navigation("EpisodeWatchingHistories");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.Genre", b =>
                {
                    b.Navigation("MoviesGenres");

                    b.Navigation("SeriesGenres");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.Language", b =>
                {
                    b.Navigation("MoviesLanguages");

                    b.Navigation("SeriesLanguages");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.Movies", b =>
                {
                    b.Navigation("MovieActors");

                    b.Navigation("MovieComments");

                    b.Navigation("MovieDirectors");

                    b.Navigation("MovieReviews");

                    b.Navigation("MovieStore")
                        .IsRequired();

                    b.Navigation("MovieWatchingHistories");

                    b.Navigation("MoviesCountry");

                    b.Navigation("MoviesGenres");

                    b.Navigation("MoviesLanguages");

                    b.Navigation("MoviesProducers");

                    b.Navigation("moviePhotos");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.Producer", b =>
                {
                    b.Navigation("MoviesProducers");

                    b.Navigation("SeriesProducers");
                });

            modelBuilder.Entity("NetflixStream.Domain.Entities.Series", b =>
                {
                    b.Navigation("EpisodesList");

                    b.Navigation("SeriesActors");

                    b.Navigation("SeriesCountry");

                    b.Navigation("SeriesDirectors");

                    b.Navigation("SeriesGenres");

                    b.Navigation("SeriesLanguages");

                    b.Navigation("SeriesProducers");
                });
#pragma warning restore 612, 618
        }
    }
}
